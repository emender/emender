#!/usr/bin/env lua

-- Entry point to the Emender tool.
--
-- Copyright (C) 2014, 2015 Pavel Tisnovsky
--
-- This file is part of Emender.
--
-- Emender is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; version 3 of the License.
--
-- Emender is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with Emender.  If not, see <http://www.gnu.org/licenses/>.
--

local luaVersionChecker = nil
local toolsChecker = nil
local getopt = nil
local core = nil
local help = nil
local testInfo = nil
local license = nil
local version = nil
local asserts = nil
local logger = nil
local tracer = nil
local gendoc = nil
local path = nil
local abstractWriter = nil
local htmlWriter = nil
local xmlWriter = nil
local textWriter = nil
local junitWriter = nil
local summaryWriter = nil
local textExporter = nil
local debugMode = nil



--
-- Returns directory where this script (emend) is stored.
-- This function should work even when the 'emend' is on PATH, is called
-- using absolute or relative path etc.
--
function getScriptDirectory()
    local scriptSrc = debug.getinfo(1).short_src

    -- make sure that debug module works correctly
    if not scriptSrc then
        return nil
    end

    -- make sure that the index is correct
    local scriptNameIndex = string.len(scriptSrc) - string.len("emend")
    if scriptNameIndex < 0 then
        return nil
    end

    -- "emend" is found in the short_src metadata -> let's use its index
    return string.sub(scriptSrc, 1, scriptNameIndex)
end



--
-- Returns current directory. Note that this directory might be different
-- that result of getScriptDirectory().
--
function getCurrentDirectory()
    local pwd = os.getenv("PWD")
    -- add slash if it is't part of PWD
    if not pwd:endsWith("/") then
        pwd = pwd .. "/"
    end
    return pwd
end



--
-- Alter the content of "package.path" to contain the relative path
-- to "emend" script, because we need to be able to load other modules
-- properly even in case this script is called from a different directory.
--
-- For example the following commands should work:
-- ./emend -h
-- ../emend -h
-- emend/emend -h
-- /home/bender/emend/emend -h
--
function alterPackagePath()
    local scriptDirectory = getScriptDirectory()
    package.path = package.path .. ";" ..scriptDirectory.."?.lua"
end



--
-- Load all common modules so they can be used by Emender itself
-- and by the tests as well.
--
function loadCommonModules()
    require("src/common/fileio")
    require("src/common/string")
    require("src/common/table")
    require("src/writers/commonTextWriter")
    require("src/config")
    require("src/testExporter")
    require("src/common/exec")
end



--
-- Load all module whose references should be stored in vars.
--
function loadModulesAndInitReferences()
    luaVersionChecker = require("src/selftest/luaVersionChecker")
    toolsChecker =      require("src/selftest/toolsChecker")
    getopt =            require("src/common/getopt")
    core =              require("src/core")
    help =              require("src/help")
    testInfo =          require("src/testInfo")
    license =           require("src/license")
    version =           require("src/version")
    asserts =           require("src/common/asserts")
    logger =            require("src/common/logger")
    tracer =            require("src/common/tracer")
    gendoc =            require("src/common/gendoc")
    path =              require("src/common/path")
    abstractWriter =    require("src/writers/abstractWriter")
    htmlWriter =        require("src/writers/htmlWriter")
    xmlWriter =         require("src/writers/xmlWriter")
    textWriter =        require("src/writers/textWriter")
    junitWriter =       require("src/writers/junitWriter")
    summaryWriter =     require("src/writers/summaryWriter")
    checkTools =        require("src/checkTools")
end



--
-- Store selected modules into global table _G
--
function storeModuleIntoGlobalTable()
    _G["toolsChecker"] = toolsChecker
    _G["getopt"] = getopt
    _G["testInfo"] = testInfo
    _G["logger"] = logger
    _G["tracer"] = tracer
    _G["path"] = path
    _G["checkTools"] = checkTools
end



--
-- Load all relevant modules and store selected modules into
-- the global table _G.
--
function loadModules()
    -- path to the 'emend' module should be added to the PATH
    alterPackagePath()
    -- load all module whose references should be stored in vars
    loadModulesAndInitReferences()
    -- load all common modules
    loadCommonModules()
    -- some modules should be added to the global table _G to be accessible
    -- from other scripts (including tests)
    storeModuleIntoGlobalTable()
end



function printConfiguration(outputFileNames, outputFiles, testsToRun, testOptions, tags)
    print("Tests to run:")
    for _, testToRun in ipairs(testsToRun) do
        print("", testToRun)
    end
    print()

    print("Output file names:")
    if table.isEmpty(outputFileNames) then
        print("    Not specified")
    else
        for _, outputFileName in ipairs(outputFileNames) do
            print("", outputFileName)
        end
    end
    print()

    print("Output files:")
    if table.isEmpty(outputFiles) then
        print("    Not specified")
    else
        for format, file in pairs(outputFiles) do
            print("", format, file[1])
        end
    end
    print()

    print("Tags:")
    if table.isEmpty(tags) then
        print("    Not specified")
    else
        for _, tag in ipairs(tags) do
            print("", tag)
        end
    end
    print()

    print("Options passed to tests:")
    if table.isEmpty(testOptions) then
        print("    Not specified")
    else
        for name, value in pairs(testOptions) do
            print("", name, value)
        end
    end
    print()
end

function registerWriters()
    abstractWriter.writers["html"] = htmlWriter
    abstractWriter.writers["xml"] = xmlWriter
    abstractWriter.writers["txt"] = textWriter
    abstractWriter.writers["junit"] = junitWriter
    abstractWriter.writers["summary"] = summaryWriter
end

function main(arg)
    loadModules()
    luaVersionChecker.checkLuaVersion()
    core.asserts = asserts
    core.writer = abstractWriter

    registerWriters()

    local options = getopt.getopt(arg, "")

    getopt.checkForUnknownOptions(options)

    local verboseOperations = getopt.isVerboseOptionUsed(options)
    local colorOutput = getopt.isColorOutputOptionUsed(options)
    local tracingOn = getopt.isTraceOptionUsed(options)

    local outputFileNames = getopt.getOutputFiles(arg)
    local tags = getopt.recognizeTags(arg)
    local testsToRun = getopt.getTestsToRun(arg)

    local outputFiles = getopt.recognizeOutputFormats(outputFileNames)
    local testOptions = getopt.getTestOptions(options)

    local debugMode = getopt.isDebugFlagUsed(options)

    if tracingOn then
        tracer.enable()
    end

    if verboseOperations then
        printConfiguration(outputFileNames, outputFiles, testsToRun, testOptions, tags)
    end

    toolsChecker.performBasicCheck(verboseOperations)

    logger.setColorOutput(colorOutput)

    if getopt.isHelpOptionUsed(options) then
        help.showHelp(colorOutput)
    elseif getopt.isVersionOptionUsed(options) then
        version.showVersion(colorOutput)
    elseif getopt.isLicenseOptionUsed(options) then
        license.showLicense(colorOutput)
    elseif getopt.isTestListOptionUsed(options) then
        core.performTestList(verboseOperations, colorOutput, testsToRun)
    elseif getopt.isGenDocFlagUsed(options) then
        gendoc.generateDocForWholeEmender(getScriptDirectory(), colorOutput, outputFiles)
    else
        local returnValue = core.runTests(verboseOperations, colorOutput, testsToRun, outputFiles, testOptions, tags)
        if returnValue then
            os.exit(0)
        else
            os.exit(1)
        end
    end
end

main(arg)


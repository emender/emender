#!/usr/bin/env lua

local luaVersionChecker = nil
local toolsChecker = nil
local getopt = nil
local core = nil
local help = nil
local license = nil
local version = nil
local asserts = nil
local logger = nil

function getScriptDirectory()
    local scriptSrc = debug.getinfo(1).short_src
    local scriptNameIndex = string.len(scriptSrc) - string.len("emend")
    return string.sub(scriptSrc, 1, scriptNameIndex)
end

--
-- Alter the content of "package.path" to contain the relative path
-- to "emend" script, because we need to be able to load other modules
-- properly even in case this script is called from a different directory.
--
-- For example the following commands should work:
-- ./emend -h
-- ../emend -h
-- emend/emend -h
-- /home/bender/emend/emend -h
--
function alterPackagePath()
    local scriptDirectory = getScriptDirectory()
    package.path = package.path .. ";" ..scriptDirectory.."?.lua"
end

--
-- Load all relevant modules
--
function loadModules()
    alterPackagePath()
    luaVersionChecker = require("src/selftest/luaVersionChecker")
    toolsChecker = require("src/selftest/toolsChecker")
    getopt = require("src/common/getopt")
    core = require("src/core")
    help = require("src/help")
    license = require("src/license")
    version = require("src/version")
    asserts = require("src/common/asserts")
    logger = require("src/common/logger")
    require("src/common/string")
end

function getTestsToRun(arg)
    local testList = {}

    for i, argument in ipairs(arg) do
        if argument:sub(1,1) ~= "-" then
            table.insert(testList, argument)
        end
    end

    return testList
end

function main(arg)
    loadModules()
    luaVersionChecker.checkLuaVersion()
    core.asserts = asserts

    --toolsChecker.performCheck()
    local options = getopt.getopt(arg, "")
    local verboseOperations = core.isVerboseOptionUsed(options)
    local colorOutput = core.isColorOutputOptionUsed(options)
    local testsToRun = getTestsToRun(arg)

    logger.setColorOutput(colorOutput)

    if core.isHelpOptionUsed(options) then
        help.showHelp(colorOutput)
    elseif core.isVersionOptionUsed(options) then
        version.showVersion(colorOutput)
    elseif core.isLicenseOptionUsed(options) then
        license.showLicense(colorOutput)
    elseif core.isTestListOptionUsed(options) then
        core.performTestList(verboseOperations, colorOutput)
    else
        core.runTests(verboseOperations, colorOutput, testsToRun)
    end
end

main(arg)


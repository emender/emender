#!/usr/bin/env lua

-- Entry point to the Emender tool.
--
-- Copyright (C) 2014, 2015 Pavel Tisnovsky
--
-- This file is part of Emender.
--
-- Emender is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; version 3 of the License.
--
-- Emender is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with Emender.  If not, see <http://www.gnu.org/licenses/>.
--

local luaVersionChecker = nil
local toolsChecker = nil
local getopt = nil
local core = nil
local help = nil
local testInfo = nil
local license = nil
local version = nil
local asserts = nil
local logger = nil
local tracer = nil
local gendoc = nil
local abstractWriter = nil
local htmlWriter = nil
local xmlWriter = nil
local textWriter = nil
local junitWriter = nil
local summaryWriter = nil
local textExporter = nil
local debugMode = nil



function getScriptDirectory()
    local scriptSrc = debug.getinfo(1).short_src
    local scriptNameIndex = string.len(scriptSrc) - string.len("emend")
    return string.sub(scriptSrc, 1, scriptNameIndex)
end

function getCurrentDirectory()
    local pwd = os.getenv("PWD")
    if not pwd:endsWith("/") then
        pwd = pwd .. "/"
    end
    return pwd
end

--
-- Alter the content of "package.path" to contain the relative path
-- to "emend" script, because we need to be able to load other modules
-- properly even in case this script is called from a different directory.
--
-- For example the following commands should work:
-- ./emend -h
-- ../emend -h
-- emend/emend -h
-- /home/bender/emend/emend -h
--
function alterPackagePath()
    local scriptDirectory = getScriptDirectory()
    package.path = package.path .. ";" ..scriptDirectory.."?.lua"
end

--
-- Load all relevant modules
--
function loadModules()
    alterPackagePath()
    luaVersionChecker = require("src/selftest/luaVersionChecker")
    toolsChecker = require("src/selftest/toolsChecker")
    getopt = require("src/common/getopt")
    core = require("src/core")
    help = require("src/help")
    testInfo = require("src/testInfo")
    _G["testInfo"] = testInfo
    license = require("src/license")
    version = require("src/version")
    asserts = require("src/common/asserts")
    logger = require("src/common/logger")
    _G["logger"] = logger
    tracer = require("src/common/tracer")
    gendoc = require("src/common/gendoc")
    abstractWriter = require("src/writers/abstractWriter")
    htmlWriter = require("src/writers/htmlWriter")
    xmlWriter = require("src/writers/xmlWriter")
    textWriter = require("src/writers/textWriter")
    junitWriter = require("src/writers/junitWriter")
    summaryWriter = require("src/writers/summaryWriter")
    require("src/common/fileio")
    require("src/common/string")
    require("src/common/table")
    require("src/writers/commonTextWriter")
    require("src/config")
    require("src/testExporter")
end

function checkForUnknownOptions(options)
    local unknownOptions = getopt.getUnknownOptions(options)
    local unknownOptionsCnt = table.hashTableSize(unknownOptions)
    if unknownOptionsCnt > 0 then
        local msg = ""
        if unknownOptionsCnt == 1 then
            msg = "option is"
        else
            msg = "options are"
        end
        print("Error - unknown " .. msg .. " used on the command line:")

        -- list all unknown command line options
        -- for stability we need output to be sorted
        local sortedUnknownOptions = table.sortedKeys(unknownOptions)
        for _,v in ipairs(sortedUnknownOptions) do
            print("    " .. v)
        end

        os.exit(1)
    end
end

function isTableEmpty(tbl)
    return not tbl or next(tbl) == nil
end

function printConfiguration(outputFileNames, outputFiles, testsToRun, testOptions)
    print("Tests to run:")
    for _, testToRun in ipairs(testsToRun) do
        print("", testToRun)
    end
    print()

    print("Output file names:")
    if isTableEmpty(outputFileNames) then
        print("    Not specified")
    else
        for _, outputFileName in ipairs(outputFileNames) do
            print("", outputFileName)
        end
    end
    print()

    print("Output files:")
    if isTableEmpty(outputFiles) then
        print("    Not specified")
    else
        for format, file in pairs(outputFiles) do
            print("", format, file[1])
        end
    end
    print()

    print("Options passed to tests:")
    if isTableEmpty(testOptions) then
        print("    Not specified")
    else
        for name, value in pairs(testOptions) do
            print("", name, value)
        end
    end
    print()
end

function registerWriters()
    abstractWriter.writers["html"] = htmlWriter
    abstractWriter.writers["xml"] = xmlWriter
    abstractWriter.writers["txt"] = textWriter
    abstractWriter.writers["junit"] = junitWriter
    abstractWriter.writers["summary"] = summaryWriter
end

function main(arg)
    loadModules()
    luaVersionChecker.checkLuaVersion()
    core.asserts = asserts
    core.writer = abstractWriter

    registerWriters()

    --toolsChecker.performCheck()
    local options = getopt.getopt(arg, "")

    checkForUnknownOptions(options)

    local verboseOperations = getopt.isVerboseOptionUsed(options)
    local colorOutput = getopt.isColorOutputOptionUsed(options)
    local tracingOn = getopt.isTraceOptionUsed(options)

    local outputFileNames = getopt.getOutputFiles(arg)
    local testsToRun = getopt.getTestsToRun(arg)

    local outputFiles = getopt.recognizeOutputFormats(outputFileNames)
    local testOptions = getopt.getTestOptions(options)

    local debugMode = getopt.isDebugFlagUsed(options)

    if tracingOn then
        tracer.enable()
    end

    if verboseOperations then
        printConfiguration(outputFileNames, outputFiles, testsToRun, testOptions)
    end

    logger.setColorOutput(colorOutput)

    if getopt.isHelpOptionUsed(options) then
        help.showHelp(colorOutput)
    elseif getopt.isVersionOptionUsed(options) then
        version.showVersion(colorOutput)
    elseif getopt.isLicenseOptionUsed(options) then
        license.showLicense(colorOutput)
    elseif getopt.isTestListOptionUsed(options) then
        core.performTestList(verboseOperations, colorOutput)
    else
        local returnValue = core.runTests(verboseOperations, colorOutput, testsToRun, outputFiles, testOptions)
        if returnValue then
            os.exit(0)
        else
            os.exit(1)
        end
    end
end

main(arg)


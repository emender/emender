#!/usr/bin/env lua

local luaVersionChecker = nil
local toolsChecker = nil
local getopt = nil
local core = nil
local help = nil
local license = nil
local version = nil
local asserts = nil
local logger = nil
local tracer = nil
local abstractWriter = nil
local htmlWriter = nil
local xmlWriter = nil
local textWriter = nil



function getScriptDirectory()
    local scriptSrc = debug.getinfo(1).short_src
    local scriptNameIndex = string.len(scriptSrc) - string.len("emend")
    return string.sub(scriptSrc, 1, scriptNameIndex)
end

--
-- Alter the content of "package.path" to contain the relative path
-- to "emend" script, because we need to be able to load other modules
-- properly even in case this script is called from a different directory.
--
-- For example the following commands should work:
-- ./emend -h
-- ../emend -h
-- emend/emend -h
-- /home/bender/emend/emend -h
--
function alterPackagePath()
    local scriptDirectory = getScriptDirectory()
    package.path = package.path .. ";" ..scriptDirectory.."?.lua"
end

--
-- Load all relevant modules
--
function loadModules()
    alterPackagePath()
    luaVersionChecker = require("src/selftest/luaVersionChecker")
    toolsChecker = require("src/selftest/toolsChecker")
    getopt = require("src/common/getopt")
    core = require("src/core")
    help = require("src/help")
    license = require("src/license")
    version = require("src/version")
    asserts = require("src/common/asserts")
    logger = require("src/common/logger")
    tracer = require("src/common/tracer")
    abstractWriter = require("src/writers/abstractWriter")
    htmlWriter = require("src/writers/htmlWriter")
    xmlWriter = require("src/writers/xmlWriter")
    textWriter = require("src/writers/textWriter")
    require("src/common/string")
    require("src/common/table")
end

function checkForUnknownOptions(options)
    local unknownOptions = getopt.getUnknownOptions(options)
    local unknownOptionsCnt = table.hashTableSize(unknownOptions)
    if unknownOptionsCnt > 0 then
        local msg = ""
        if unknownOptionsCnt == 1 then
            msg = "option is"
        else
            msg = "options are"
        end
        print("Error - unknown " .. msg .. " used on the command line:")
        for i,v in pairs(unknownOptions) do
            print("    " .. i)
        end
        os.exit(1)
    end
end


function registerWriters()
    abstractWriter.writers["html"] = htmlWriter
    abstractWriter.writers["xml"] = xmlWriter
    abstractWriter.writers["txt"] = textWriter
end

function main(arg)
    loadModules()
    luaVersionChecker.checkLuaVersion()
    core.asserts = asserts
    core.writer = abstractWriter

    registerWriters()

    --toolsChecker.performCheck()
    local options = getopt.getopt(arg, "")

    checkForUnknownOptions(options)

    local verboseOperations = getopt.isVerboseOptionUsed(options)
    local colorOutput = getopt.isColorOutputOptionUsed(options)
    local tracingOn = getopt.isTraceOptionUsed(options)

    local outputFileNames = getopt.getOutputFiles(arg)
    local testsToRun = getopt.getTestsToRun(arg)

    local outputFiles = getopt.recognizeOutputFormats(outputFileNames)

    if tracingOn then
        tracer.enable()
    end

    logger.setColorOutput(colorOutput)

    if getopt.isHelpOptionUsed(options) then
        help.showHelp(colorOutput)
    elseif getopt.isVersionOptionUsed(options) then
        version.showVersion(colorOutput)
    elseif getopt.isLicenseOptionUsed(options) then
        license.showLicense(colorOutput)
    elseif getopt.isTestListOptionUsed(options) then
        core.performTestList(verboseOperations, colorOutput)
    else
        core.runTests(verboseOperations, colorOutput, testsToRun, outputFiles)
    end
end

main(arg)


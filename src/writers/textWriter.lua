-- textWriter.lua - a writer for the plain text file format
-- Copyright (C) 2014 Pavel Tisnovsky, Jaromir Hradilek

-- This file is part of Emender.

-- This program is free software:  you can redistribute it and/or modify it
-- under the terms of  the  GNU General Public License  as published by the
-- Free Software Foundation, version 3 of the License.
--
-- This program  is  distributed  in the hope  that it will be useful,  but
-- WITHOUT  ANY WARRANTY;  without  even the implied warranty of MERCHANTA-
-- BILITY or  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
-- License for more details.
--
-- You should have received a copy of the GNU General Public License  along
-- with this program. If not, see <http://www.gnu.org/licenses/>.

local textWriter = {
    textWidth = 75,
    horizontalSeparator = string.rep("-", 75) .. "\n"
}

-- Format the result of a single test function:
function formatTestResult(result, explanation)
    local message = explanation or "(unknown)"
    local status = "[ " .. string.upper(result) .. " ]  "

    return string.alignLeft(status .. message, textWriter.textWidth - 2,
                            string.len(status) + 4, 4) .. "\n"
end

-- Format test metadata:
function formatTestMetadata(label, text)
    label = label or ""
    text = text or ""

    return string.alignLeft(label .. " " .. text, textWriter.textWidth - 2,
                            string.len(label) + 3, 2) .. "\n"
end

-- Format a test case header:
function formatTestCaseTitle(name, result)
    name = name or ""
    result = result or ""

    return string.horizontalFill("\n  " .. name, result,
                                 textWriter.textWidth) .. "\n\n"
end

-- Format a section header:
function formatSectionTitle(title)
    title = title or ""

    return textWriter.horizontalSeparator ..
           string.alignCenter(":: " .. title .. " ::\n", textWriter.textWidth) ..
           textWriter.horizontalSeparator
end

-- Determine the result of a single test case or a test suite:
function determineTestResult(passed, failed, infos, errors)
    passed = passed or 0
    failed = failed or 0
    infos = infos or 0
    errors = errors or 0

    if passed + failed + infos + errors == 0 then
        return 'fail'
    end

    if failed + errors > 0 then
        return 'fail'
    end

    return 'pass'
end

-- Do nothing:
function textWriter.writeHeader(fout, results)
    return
end

-- Write the report footer to the file:
function textWriter.writeFooter(fout, results)
    local passed = results.passedTests
    local failed = results.failedTests
    local total  = passed + failed
    local result = determineTestResult(passed, failed)

    fout:write(formatSectionTitle("Summary") .. "\n")
    fout:write("  Executed Tests: " .. total .. "\n")
    fout:write("  Passed Tests:   " .. passed .. "\n")
    fout:write("  Failed Tests:   " .. failed .. "\n")
    fout:write("  Overall Result: " .. string.upper(result) .. "\n\n")
    fout:write(textWriter.horizontalSeparator)
    fout:write(string.horizontalFill("Generated by Emender", "https://github.com/emender/", textWriter.textWidth))

end

-- Write the test suite header to the file:
function textWriter.writeSuiteStart(fout, testSuite)
    local name = testSuite.name
    local description = testSuite.description
    local authors = testSuite.authors
    local emails = testSuite.emails
    local modified = testSuite.modified
    local tags = table.concat(testSuite.tags, ", ")

    fout:write(formatSectionTitle(name) .. "\n")
    fout:write(formatTestMetadata("Description:  ", description))
    fout:write(formatTestMetadata("Authors:      ", authors))
    fout:write(formatTestMetadata("Emails:       ", emails))
    fout:write(formatTestMetadata("Last Modified:", modified))
    fout:write(formatTestMetadata("Tags:         ", tags))
end

-- Write the test suite footer to the file:
function textWriter.writeSuiteEnd(fout, testSuite)
    local passed = testSuite.passCount
    local failed = testSuite.failCount
    local errors = testSuite.errorCount
    local total  = testSuite.total
    local result = determineTestResult(passed, failed, 0, errors)

    fout:write(formatTestCaseTitle("Test Summary"))
    fout:write("    Executed Test Cases: " .. total .. "\n")
    fout:write("    Passed Test Cases:   " .. passed .. "\n")
    fout:write("    Failed Test Cases:   " .. failed .. "\n")
    fout:write("    Encountered Errors:  " .. errors .. "\n")
    fout:write("    Overall Result:      " .. string.upper(result) .. "\n\n")
end

-- Write the test case header to the file:
function textWriter.writeCaseStart(fout, testCase)
    local name = testCase.name
    local result = determineTestResult(testCase.pass, testCase.fail, testCase.info, testCase.errors)

    fout:write(formatTestCaseTitle("Test Case: " .. name, string.upper(result)))
end

-- Do nothing:
function textWriter.writeCaseEnd(fout, testCaseInfo)
    return
end

-- Write the test result to the file:
function textWriter.writeTestPass(fout, testName, message)
    local explanation = message[2]
    fout:write(formatTestResult('pass', explanation))
end

-- Write the test result to the file:
function textWriter.writeTestFail(fout, testName, message)
    local explanation = message[2]
    fout:write(formatTestResult('fail', explanation))
end

-- Write the test result to the file:
function textWriter.writeTestInfo(fout, testName, message)
    local explanation = message[2]
    fout:write(formatTestResult('info', explanation))
end

-- Do nothing:
function textWriter.writeTestError(fout, testName, message)
    return
end

return textWriter

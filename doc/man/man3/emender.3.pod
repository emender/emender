=head1 NAME

emender - the core library for Emender

=head1 SYNOPSIS

  -- Define a new test class:
  SampleTest = {
      -- Provide information about the test:
      metadata = {
          description = "A sample test.",
          authors = "John Doe",
          emails = "john@example.com",
          changed = "2014-07-31",
          tags = {"Sanity", "Basic"},
      },
      -- List external dependencies:
      requires = {"curl", "xmllint"}
  }

  -- Set up the test:
  function SampleTest.setUp()
      ExampleTest.answer = 42
  end

  -- Clean up after the test:
  function SampleTest.tearDown()
      -- Nothing to do here
  end

  -- Verify that the answer is a number:
  function SampleTest.testType()
      is_type(SampleTest.answer, number, "The answer is a number")
  end

  -- Verify that the answer is 42:
  function SampleTest.testEquality()
      is_equal(SampleTest.answer, 42, "The answer is 42")
  end

=head1 DESCRIPTION

In Emender, each individual test is stored in a separate file with the
B<.lua> file extension. A typical test file is comprised of a test class
definition followed by a number of test methods.

=head2 Test Class

To define a new test class, use the following syntax:

I<ClassName> = {I<attribute>...}

Replace I<ClassName> with the name of the class representing the test and
I<attribute> with on or more attributes separated by a comma. Available
attributes are as follows:

=over

=item B<metadata>

The C<metadata> attribute is mandatory and allows you to provide
information about the test file. It is mapped to a table and should contain
the following keys:

=over

=item B<description>

A string with a brief description of the test file and its purpose.

=item B<authors>

A string with a comma-separated list of the test file authors.

=item B<emails>

A string with a comma-separated list of email addresses.

=item B<changed>

A string with the date of last modification. The date must be in the
B<I<YYYY>-I<MM>-I<DD>> format.

=item B<tags>

A table of strings representing tags associated with the test. Tags are
case sensitive.

=back

For example, the following C<metadata> definition describes a test that
reads a file, locates all package names in it, and verifies that these
packages are available for a particular version of the operating system:

  metadata = {
      description = "Verify that all package names are valid.",
      authors = "John Doe",
      emails = "john@example.com",
      changed = "2014-09-03",
      tags = {"Sanity", "XML"},
  }

=item B<requires>

The C<requires> attribute is optional and allows you to define a list of
external commands that are required by the test. It is mapped to a table of
strings representing the commands.

For example, the following C<requires> definition specifies that the test
depends on B<curl>(1), B<xmllint>(1), B<xmlstarlet>(1), and B<sqlite3>(1):

  requires = {"curl", "xmllint", "xmlstarlet", "sqlite3"}

=back

=head2 Test Methods

To define a new test method, use the following syntax:

B<function> I<ClassName>.I<MethodName>() I<command>... B<end>

Replace I<ClassName> with the name of the class representing the test,
I<MethodName> with the name of the test method, and I<command> with the
implementation of the method. The following methods are called
automatically by Emender:

=over

=item I<ClassName>.B<setUp>()

The C<setUp()> method is called as the very first method and is used to
prepare the testing environment.

Replace I<ClassName> with the name of the class representing the test. For
example, to set up a test named C<CheckPackages>, type:

  function CheckPackages.setUp()
      -- commands to set up the test
  end

=item I<ClassName>.B<tearDown>()

The C<tearDown()> method is called as the very last method and is used to
clean up after the test.

Replace I<ClassName> with the name of the class representing the test. For
example, to clean up after a test named C<CheckPackages>, type:

  function CheckPackages.tearDown()
      -- commands to clean up after the test
  end

=item I<ClassName>.B<test>I<MethodName>()

The C<testI<MethodName>> methods are called in alphabetical order and are
comprised of individual test functions.

Replace I<ClassName> with the name of the class representing the test and
I<MethodName> with the name of the test method. For example, to create a test
method named C<testPackageNames> as part of the C<CheckPackages> test,
type:

  function CheckPackages.testPackageNames()
      -- test method implementation
  end

=back

=head2 Test Functions

The following are available test functions:

=over

=item B<is_true>(I<expression>, I<explanation>)

The C<is_true()> function tests whether a certain expression evaluates to
C<true>. If it does, the function reports the test as B<passed>, otherwise
it reports it as B<failed>.

Replace I<expression> with a valid Lua expression and I<explanation> with a
short description of the test. For example, to test if a variable named
C<result> is greater than 42, type:

  is_true(result > 42, "The value is greater than 42")

=item B<is_false>(I<expression>, I<explanation>)

The C<is_false()> function tests whether a certain expression evaluates to
C<false>. If it does, the function reports the test as B<passed>, otherwise
it reports it as B<failed>.

Replace I<expression> with a valid Lua expression and I<explanation> with a
short description of the test. For example, to test if a variable named
C<result> is less than or equal to 42, type:

  is_false(result > 42, "The value is not greater than 42")

=item B<is_equal>(I<value>, I<expected_value>, I<explanation>)

The C<is_equal()> function compares two values and tests whether these
values are equal. If they are, the function reports the test as B<passed>,
otherwise it reports it as B<failed>.

Replace I<value> with the value to test, I<expected_value> with the
expected value, and I<explanation> with a short description of the test.
For example, to test if a variable named C<result> is equal to 42, type:

  is_equal(result, 42, "The value is equal to 42")

=item B<is_unequal>(I<value>, I<expected_value>, I<explanation>)

The C<is_unequal()> function compares two values and tests whether these
values are different. If they are, the function reports the test as
B<passed>, otherwise it reports it as B<failed>.

Replace I<value> with the value to test, I<expected_value> with the
expected value, and I<explanation> with a short description of the test.
For example, to test if a variable named C<result> is of a value other than
42, type:

  is_unequal(result, 42, "The value is not equal to 42")

=item B<is_like>(I<value>, I<pattern>, I<explanation>)

The C<is_like()> function tests whether a certain value matches a Lua
pattern. If it does, the function reports the test as B<passed>, otherwise
it reports it as B<failed>.

Replace I<value> with the value to test, I<pattern> with the pattern, and
I<explanation> with a short description of the test. For example, to test
if a variable named C<result> contains a date, type:

  is_like(result, "^%d%d%d%d-%d%d-%d%d$", "The value represents a date")

=item B<is_unlike>(I<value>, I<pattern>, I<explanation>)

The C<is_unlike()> function tests whether a certain value does not match a
Lua pattern. If it does not, the function reports the test as B<passed>,
otherwise it reports it as B<failed>.

Replace I<value> with the value to test, I<pattern> with the pattern, and
I<explanation> with a short description of the test. For example, to test
if a variable named C<result> does not contain letters, type:

  is_unlike(result, "%a", "The value does not contain letters")

=item B<is_type>(I<value>, I<type>, I<explanation>)

The C<is_type()> function tests whether a certain value is of a particular
type. If it is, the function reports the test as B<passed>, otherwise it
reports it as B<failed>.

Replace I<value> with the value to test, I<type> with the expected data
type, and I<explanation> with a short description of the test. For example,
to test if a variable named C<result> contains a number, type:

  is_type(result, "number", "The value is a number")

=item B<is_not_type>(I<value>, I<type>, I<explanation>)

The C<is_not_type()> function tests whether a certain value is not of a
particular type. If it is not, the function reports the test as B<passed>,
otherwise it reports it as B<failed>.

Replace I<value> with the value to test, I<type> with the expected data
type, and I<explanation> with a short description of the test. For example,
to test if a variable named C<result> contains a value that is not a
number, type:

  is_not_type(result, "number", "The value is not a number")

=item B<is_nil>(I<value>, I<explanation>)

The C<is_nil()> function tests whether a certain value is C<nil>. If it is,
the function reports the test as B<passed>, otherwise it reports it as
B<failed>.

Replace I<value> with the value to test and I<explanation> with a short
description of the test. For example, to test if a variable named C<result>
is equal to C<nil>, type:

  is_nil(result, "The value is nil")

=item B<is_not_nil>(I<value>, I<explanation>)

The C<is_not_nil()> function tests whether a certain value is not C<nil>.
If it is not, the function reports the test as B<passed>, otherwise it
reports it as B<failed>.

Replace I<value> with the value to test and I<explanation> with a short
description of the test. For example, to test if a variable named C<result>
is not C<nil>, type:

  is_not_nil(result, "The value is not nil")

=item B<is_empty>(I<table>, I<explanation>)

The C<is_empty()> function tests whether a certain table is empty. If it
is, the function reports the test as B<passed>, otherwise it reports it as
B<failed>.

Replace I<table> with the table to test and I<explanation> with a short
description of the test. For example, to test if a table named C<results>
is empty, type:

  is_empty(results, "The table is empty")

=item B<is_not_empty>(I<table>, I<explanation>)

The C<is_not_empty()> function tests whether a certain table contains at
least one item. If it does, the function reports the test as B<passed>,
otherwise it reports the test as B<failed>.

Replace I<table> with the table to test and I<explanation> with a short
description of the test. For example, to test if a table named C<result>
contains some items, type:

  is_not_empty(results, "The table is not empty")

=item B<pass>(I<explanation>)

The C<pass()> function reports the test as B<passed>.

Replace I<explanation> with a short description of the test. For example:

  pass("The value is on the list of allowed values")

=item B<fail>(I<explanation>)

The C<fail()> function reports the test as B<failed>.

Replace I<explanation> with a short description of the test. For example:

  fail("The value is not on the list of allowed values")

=item B<warn>(I<message>)

The C<warn()> function logs a message without reporting the test as
B<passed> or B<failed>. You can use it to report less important issues or
issues you are not sure about.

Replace I<message> with a short message. For example:

  warn("The sentence does not start with a capital letter")

=back

=head2 Helper Methods

Emender implements a number of helper method to make it easier for you to
write test functions. Available helper methods are as follows:

=over

=item B<string>.B<alignCenter>(I<text>[, I<width>[, I<indent>[,
I<first_indent>]]])

The C<string.alignCenter()> method breaks lines at word boundaries, indents
the text, and centers it.

Replace I<text> with a string, I<width> with the line width (the default
value is 75 characters), I<indent> with the indentation level (the default
value is 0 characters), and I<first_indent> with the indentation level of
the very first line (the same as I<indent> by default). For example:

  string.alignCenter(":: Summary ::\n", 75)

This method is especially useful if you intend to implement support for
another output format or add debugging information to your tests.

=item B<string>.B<alignLeft>(I<text>[, I<width>[, I<indent>[,
I<first_indent>]]])

The C<string.alignLeft()> method breaks lines at word boundaries, indents
the text, and aligns it along the left margin.

Replace I<text> with a string, I<width> with the line width (the default
value is 75 characters), I<indent> with the indentation level (the default
value is 0 characters), and I<first_indent> with the indentation level of
the very first line (the same as I<indent> by default). For example:

  string.alignLeft("  Executed Tests: " .. total .. "\n")

This method is especially useful if you intend to implement support for
another output format or add debugging information to your tests.

=item B<string>.B<alignRight>(I<text>[, I<width>[, I<indent>[,
I<first_indent>]]])

The C<string.alignRight()> method breaks lines at word boundaries, indents
the text, and aligns it along the right margin.

Replace I<text> with a string, I<width> with the line width (the default
value is 75 characters), I<indent> with the indentation level (the default
value is 0 characters), and I<first_indent> with the indentation level of
the very first line (the same as I<indent> by default). For example:

  string.alignRight(string.upper(result) .. "\n")

This method is especially useful if you intend to implement support for
another output format or add debugging information to your tests.

=back

=head1 SEE ALSO

B<emend>(1), B<lua>(1)

=head1 BUGS

To report a bug or submit a patch, please, file a new issue at
L<https://github.com/emender/emender/issues>.

=head1 COPYRIGHT

Copyright (C) 2014-2015 Pavel Tisnovsky, Jaromir Hradilek

This program is free software; see the source for copying conditions. It is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
